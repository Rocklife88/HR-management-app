import { ref, computed, watch } from 'vue'
import { supabase, testConnection } from '../lib/supabase.js'

const companies = ref([])
const teams = ref([])
const employees = ref([])
const selectedCompany = ref(null)
const loading = ref(false)
const error = ref(null)

export function useHR() {
  const loadData = async () => {
    loading.value = true
    error.value = null
    
    try {
      // Test connessione
      const isConnected = await testConnection()
      if (!isConnected) {
        throw new Error('Impossibile connettersi al database')
      }

      // Carica aziende
      const { data: companiesData, error: companiesError } = await supabase
        .from('companies')
        .select('*')
        .order('created_at', { ascending: false })
      
      if (companiesError) throw companiesError
      companies.value = companiesData || []

      // Carica team
      const { data: teamsData, error: teamsError } = await supabase
        .from('teams')
        .select('*')
        .order('created_at', { ascending: false })
      
      if (teamsError) throw teamsError
      teams.value = teamsData || []

      // Carica dipendenti
      const { data: employeesData, error: employeesError } = await supabase
        .from('employees')
        .select('*')
        .order('created_at', { ascending: false })
      
      if (employeesError) throw employeesError
      employees.value = employeesData || []

      console.log('✅ Dati caricati da Supabase:', {
        companies: companies.value.length,
        teams: teams.value.length,
        employees: employees.value.length
      })

      loading.value = false
    } catch (err) {
      console.error('❌ Errore nel caricamento:', err)
      error.value = err.message
      loading.value = false
    }
  }

  const setSelectedCompany = (companyId) => {
    selectedCompany.value = companyId
    console.log('Azienda selezionata:', companyId)
  }

  // Company CRUD
  const addCompany = async (companyData) => {
    try {
      const { data, error } = await supabase
        .from('companies')
        .insert([companyData])
        .select()
        .single()
      
      if (error) throw error
      
      companies.value.unshift(data)
      console.log('✅ Azienda aggiunta:', data)
      return data
    } catch (err) {
      console.error('❌ Errore aggiunta azienda:', err)
      throw err
    }
  }
  const updateCompany = async (id, companyData) => {
    try {
      const { data, error } = await supabase
        .from('companies')
        .update(companyData)
        .eq('id', id)
        .select()
        .single()
      
      if (error) throw error
      
      const index = companies.value.findIndex(c => c.id === id)
      if (index !== -1) {
        companies.value[index] = data
      }
      console.log('✅ Azienda aggiornata:', data)
      return data
    } catch (err) {
      console.error('❌ Errore aggiornamento azienda:', err)
      throw err
    }
  }

  const deleteCompany = async (id) => {
    try {
      const { error } = await supabase
        .from('companies')
        .delete()
        .eq('id', id)
      
      if (error) throw error
      
      const index = companies.value.findIndex(c => c.id === id)
      if (index !== -1) {
        companies.value.splice(index, 1)
        
        // Se l'azienda eliminata era selezionata, deseleziona
        if (selectedCompany.value === id) {
          selectedCompany.value = null
        }
        
        console.log('✅ Azienda eliminata:', id)
      }
    } catch (err) {
      console.error('❌ Errore eliminazione azienda:', err)
      throw err
    }
  }

  // Team CRUD
  const addTeam = async (teamData) => {
    try {
      const { data, error } = await supabase
        .from('teams')
        .insert([{
          name: teamData.name,
          description: teamData.description,
          company_id: teamData.companyId
        }])
        .select()
        .single()
      
      if (error) throw error
      
      teams.value.unshift(data)
      console.log('✅ Team aggiunto:', data)
      return data
    } catch (err) {
      console.error('❌ Errore aggiunta team:', err)
      throw err
    }
  }

  const updateTeam = (id, teamData) => {
    const index = teams.value.findIndex(t => t.id === id)
    if (index !== -1) {
      teams.value[index] = { ...teams.value[index], ...teamData }
      console.log('Team aggiornato:', teams.value[index])
    }
  }

  const deleteTeam = (id) => {
    const index = teams.value.findIndex(t => t.id === id)
    if (index !== -1) {
      // Rimuovi teamId dai dipendenti del team
      employees.value.forEach(emp => {
        if (emp.teamId === id) {
          emp.teamId = null
        }
      })
      
      teams.value.splice(index, 1)
      console.log('Team eliminato:', id)
    }
  }

  // Employee CRUD
  const addEmployee = (employeeData) => {
    const newEmployee = {
      id: Date.now().toString(),
      ...employeeData,
      createdAt: new Date().toISOString()
    }
    employees.value.push(newEmployee)
    console.log('Dipendente aggiunto:', newEmployee)
    return newEmployee
  }

  const updateEmployee = (id, employeeData) => {
    const index = employees.value.findIndex(e => e.id === id)
    if (index !== -1) {
      employees.value[index] = { ...employees.value[index], ...employeeData }
      console.log('Dipendente aggiornato:', employees.value[index])
    }
  }

  const deleteEmployee = (id) => {
    const index = employees.value.findIndex(e => e.id === id)
    if (index !== -1) {
      employees.value.splice(index, 1)
      console.log('Dipendente eliminato:', id)
    }
  }

  // Computed properties per filtrare per azienda selezionata
  const filteredTeams = computed(() => {
    if (!selectedCompany.value) return teams.value
    return teams.value.filter(team => team.companyId === selectedCompany.value)
  })

  const filteredEmployees = computed(() => {
    if (!selectedCompany.value) return employees.value
    return employees.value.filter(employee => employee.companyId === selectedCompany.value)
  })

  // Export delle utility
  const exportToExcel = (data, filename) => {
    console.log('Esportazione Excel:', filename, data)
    // Implementazione export Excel qui
  }

  const importFromJSON = (jsonData) => {
    console.log('Importazione JSON:', jsonData)
    // Implementazione import qui
    return true
  }

  const clearAllData = () => {
    if (confirm('Sei sicuro di voler cancellare TUTTI i dati? Questa azione non può essere annullata.')) {
      companies.value = []
      teams.value = []
      employees.value = []
      selectedCompany.value = null
      
      // Cancella anche da localStorage
      Object.values(STORAGE_KEYS).forEach(key => {
        localStorage.removeItem(key)
      })
      
      console.log('Tutti i dati sono stati cancellati')
      return true
    }
    return false
  }

  return {
    // State
    companies,
    teams,
    employees,
    selectedCompany,
    loading,
    error,
    
    // Filtered data
    filteredTeams,
    filteredEmployees,
    
    // Actions
    loadData,
    setSelectedCompany,
    
    // Company actions
    addCompany,
    updateCompany,
    deleteCompany,
    
    // Team actions
    addTeam,
    updateTeam,
    deleteTeam,
    
    // Employee actions
    addEmployee,
    updateEmployee,
    deleteEmployee,
    
    // Utilities
    exportToExcel,
    importFromJSON,
    clearAllData
  }
}
